### ===========================================
### CROWDADS API - REST CLIENT TEST FILE
### ===========================================
### Base URL: http://localhost:3001/api (Development)
### Authentication: JWT Bearer Token required for most endpoints
### ===========================================

### ===========================================
### AUTHENTICATION ENDPOINTS
### ===========================================

### Login (Public)
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@crowdads.com",
  "password": "SecurePassword123!"
}

### Expected Response:
### {
###   "id": "uuid-string",
###   "email": "admin@crowdads.com", 
###   "name": "Super Admin",
###   "roles": ["SuperAdmin"],
###   "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...",
###   "expiredAt": "2024-01-01T12:00:00.000Z"
### }

### Login with different user
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@crowdads.com",
  "password": "SecurePassword123!"
}

### ===========================================
### USERS & RBAC ENDPOINTS
### ===========================================
### Note: Copy JWT token from login response and use in Authorization header
### Example: Authorization: Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9...

@authToken = eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJ1dWlkLXN0cmluZyIsImVtYWlsIjoiYWRtaW5AY3Jvd2RhZHMuY29tIiwibmFtZSI6IlN1cGVyIEFkbWluIiwicm9sZXMiOlsiU3VwZXJBZG1pbiJdLCJpYXQiOjE2NDA5OTUyMDAsImV4cCI6MTY0MDk5ODgwMH0.example-signature

### Create first SuperAdmin user (Public - Bootstrap only)
### This endpoint is public only for creating the first user
POST http://localhost:3001/api/users
Content-Type: application/json

{
  "name": "Super Admin",
  "email": "admin@crowdads.com",
  "password": "SecurePassword123!",
  "phoneNumber": "+1234567890",
  "phoneNumberCountryCode": "+1"
}

### Create another user (SuperAdmin only)
POST http://localhost:3001/api/users
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "John Smith",
  "email": "john@example.com",
  "password": "password123",
  "phoneNumber": "+1987654321",
  "phoneNumberCountryCode": "+1",
  "roleKeys": ["Admin"]
}

### Create user with multiple roles (SuperAdmin only)
POST http://localhost:3001/api/users
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "Manager User",
  "email": "manager@crowdads.com",
  "password": "manager123",
  "roleKeys": ["Admin", "Executive"]
}

### Get all users (SuperAdmin only)
GET http://localhost:3001/api/users
Authorization: Bearer {{authToken}}

### Get user by ID (SuperAdmin only)
GET http://localhost:3001/api/users/uuid-string-here
Authorization: Bearer {{authToken}}

### Update user (SuperAdmin only)
PATCH http://localhost:3001/api/users/uuid-string-here
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "name": "John Smith Updated",
  "phoneNumber": "+1555666777"
}

### Assign roles to user (SuperAdmin only)
POST http://localhost:3001/api/users/uuid-string-here/roles
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "roleKeys": ["SuperAdmin", "Admin"]
}

### Delete user (SuperAdmin only)
DELETE http://localhost:3001/api/users/uuid-string-here
Authorization: Bearer {{authToken}}

### ===========================================
### ROLES REFERENCE
### ===========================================
### Available roles (use keys instead of IDs):
### Key: "SuperAdmin", NameEn: "Super Admin", NameAr: "مشرف عام"
### Key: "Admin", NameEn: "Admin", NameAr: "مشرف"  
### Key: "Executive", NameEn: "Executive", NameAr: "تنفيذي"
### 
### Use roleKeys array with these exact key values in requests

### ===========================================
### AUTHENTICATION ERROR TESTING
### ===========================================

### Test invalid credentials
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@crowdads.com",
  "password": "wrongpassword"
}

### Test missing fields
POST http://localhost:3001/api/auth/login
Content-Type: application/json

{
  "email": "admin@crowdads.com"
}

### Test unauthorized access (no token)
GET http://localhost:3001/api/users

### Test invalid token
GET http://localhost:3001/api/users
Authorization: Bearer invalid.jwt.token

### Test insufficient permissions (non-SuperAdmin accessing users)
### First login as regular user, then try accessing users endpoint
GET http://localhost:3001/api/users
Authorization: Bearer regular-user-token-here

### ===========================================
### INFLUENCERS ENDPOINTS
### ===========================================
### Note: All endpoints now require authentication

### Get all influencers (with pagination)
GET http://localhost:3001/api/influencers
Authorization: Bearer {{authToken}}

### Get all influencers with pagination
GET http://localhost:3001/api/influencers?page=1&limit=5
Authorization: Bearer {{authToken}}

### Search influencers by username
GET http://localhost:3001/api/influencers?search=john
Authorization: Bearer {{authToken}}

### Search influencers by name (English)
GET http://localhost:3001/api/influencers?search=sara
Authorization: Bearer {{authToken}}

### Search influencers by email
GET http://localhost:3001/api/influencers?search=example.com
Authorization: Bearer {{authToken}}

### Search with pagination
GET http://localhost:3001/api/influencers?search=tech&page=1&limit=3
Authorization: Bearer {{authToken}}

### Get influencer by ID (with relationships and social platforms)
GET http://localhost:3001/api/influencers/1
Authorization: Bearer {{authToken}}

### Create new influencer with social platforms
POST http://localhost:3001/api/influencers
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "username": "johndoe",
  "email": "john@example.com",
  "nameEn": "John Doe",
  "nameAr": "جون دو",
  "profilePictureUrl": "https://example.com/profiles/johndoe.jpg",
  "socialPlatforms": [
    {
      "key": "instagram",
      "url": "https://instagram.com/johndoe",
      "numberOfFollowers": 50000
    },
    {
      "key": "tiktok",
      "url": "https://tiktok.com/@johndoe",
      "numberOfFollowers": 25000
    },
    {
      "key": "youtube",
      "url": "https://youtube.com/johndoe",
      "numberOfFollowers": 10000
    }
  ]
}

### Create another influencer
POST http://localhost:3001/api/influencers
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "username": "sarasmith",
  "email": "sara@example.com",
  "nameEn": "Sara Smith",
  "nameAr": "سارة سميث",
  "profilePictureUrl": "https://example.com/profiles/sarasmith.jpg",
  "socialPlatforms": [
    {
      "key": "instagram",
      "url": "https://instagram.com/sarasmith",
      "numberOfFollowers": 75000
    },
    {
      "key": "snapchat",
      "url": "https://snapchat.com/add/sarasmith",
      "numberOfFollowers": 30000
    }
  ]
}

### Update influencer (replace social platforms)
PATCH http://localhost:3001/api/influencers/1
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "nameEn": "John Doe Updated",
  "socialPlatforms": [
    {
      "key": "instagram",
      "url": "https://instagram.com/johndoe_official",
      "numberOfFollowers": 75000
    },
    {
      "key": "youtube",
      "url": "https://youtube.com/johndoe_official",
      "numberOfFollowers": 15000
    },
    {
      "key": "twitter",
      "url": "https://twitter.com/johndoe",
      "numberOfFollowers": 5000
    }
  ]
}

### Update only influencer info (keep existing social platforms)
PATCH http://localhost:3001/api/influencers/2
Content-Type: application/json

{
  "nameEn": "Sara Smith Pro",
  "nameAr": "سارة سميث المحترفة"
}

### Delete influencer (cascades to social platforms and beats)
DELETE http://localhost:3001/api/influencers/1
Authorization: Bearer {{authToken}}

### ===========================================
### BRANDS ENDPOINTS
### ===========================================
### Note: All endpoints require authentication with valid JWT token

### Get all brands (with pagination)
GET http://localhost:3001/api/brands
Authorization: Bearer {{authToken}}

### Get all brands with pagination
GET http://localhost:3001/api/brands?page=1&limit=5

### Search brands by English name
GET http://localhost:3001/api/brands?search=tech

### Search brands by Arabic name
GET http://localhost:3001/api/brands?search=تك

### Search with pagination
GET http://localhost:3001/api/brands?search=fashion&page=1&limit=2

### Get brand by ID (with relationships and beats)
GET http://localhost:3001/api/brands/1

### Create new brand
POST http://localhost:3001/api/brands
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "nameEn": "TechCorp",
  "nameAr": "تك كورب",
  "logoUrl": "https://example.com/logos/techcorp.png",
  "websiteUrl": "https://techcorp.com"
}

### Create another brand
POST http://localhost:3001/api/brands
Content-Type: application/json

{
  "nameEn": "Fashion Forward",
  "nameAr": "أزياء متقدمة",
  "logoUrl": "https://example.com/logos/fashionforward.png",
  "websiteUrl": "https://fashionforward.com"
}

### Create tech brand
POST http://localhost:3001/api/brands
Content-Type: application/json

{
  "nameEn": "GreenTech Solutions",
  "nameAr": "حلول التكنولوجيا الخضراء",
  "logoUrl": "https://example.com/logos/greentech.png",
  "websiteUrl": "https://greentech-solutions.com"
}

### Update brand
PATCH http://localhost:3001/api/brands/1
Content-Type: application/json

{
  "nameEn": "TechCorp International",
  "websiteUrl": "https://techcorp-intl.com"
}

### Delete brand (cascades to beats)
DELETE http://localhost:3001/api/brands/1
Authorization: Bearer {{authToken}}

### ===========================================
### BEATS ENDPOINTS
### ===========================================
### Note: All endpoints require authentication with valid JWT token

### Get all beats (with pagination)
GET http://localhost:3001/api/beats
Authorization: Bearer {{authToken}}

### Get all beats with pagination
GET http://localhost:3001/api/beats?page=1&limit=5

### Search beats by caption
GET http://localhost:3001/api/beats?search=campaign

### Search beats by caption (case insensitive)
GET http://localhost:3001/api/beats?search=summer

### Search with pagination
GET http://localhost:3001/api/beats?search=fashion&page=1&limit=3

### Get beat by ID (with relationships - influencer and brand)
GET http://localhost:3001/api/beats/1

### Create new beat
POST http://localhost:3001/api/beats
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "caption": "Amazing summer campaign with the latest tech products! 🌟",
  "mediaUrl": "https://example.com/media/summer-campaign.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/summer-campaign.jpg",
  "statusKey": "published",
  "influencerId": 1,
  "brandId": 1
}

### Create another beat
POST http://localhost:3001/api/beats
Content-Type: application/json

{
  "caption": "Fashion week highlights - exclusive behind the scenes! ✨",
  "mediaUrl": "https://example.com/media/fashion-week.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/fashion-week.jpg",
  "statusKey": "published",
  "influencerId": 2,
  "brandId": 2
}

### Create draft beat
POST http://localhost:3001/api/beats
Content-Type: application/json

{
  "caption": "Upcoming product launch teaser",
  "mediaUrl": "https://example.com/media/product-teaser.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/product-teaser.jpg",
  "statusKey": "draft",
  "influencerId": 1,
  "brandId": 3
}

### Create beat without caption
POST http://localhost:3001/api/beats
Content-Type: application/json

{
  "mediaUrl": "https://example.com/media/minimal-beat.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/minimal-beat.jpg",
  "statusKey": "review",
  "influencerId": 2,
  "brandId": 1
}

### Update beat
PATCH http://localhost:3001/api/beats/1
Content-Type: application/json

{
  "caption": "Updated summer campaign with amazing results! 🔥",
  "statusKey": "featured"
}

### Update beat status only
PATCH http://localhost:3001/api/beats/2
Content-Type: application/json

{
  "statusKey": "archived"
}

### Delete beat
DELETE http://localhost:3001/api/beats/1
Authorization: Bearer {{authToken}}

### ===========================================
### ADVANCED PAGINATION AND SEARCH QUERIES
### ===========================================

### Test large page numbers
GET http://localhost:3001/api/beats?page=5&limit=2

### Test different page sizes
GET http://localhost:3001/api/influencers?page=1&limit=20

### Test edge cases - page 0 (should default to 1)
GET http://localhost:3001/api/brands?page=0&limit=5

### Test negative page (should default to 1)
GET http://localhost:3001/api/beats?page=-1&limit=5

### Test very large limit
GET http://localhost:3001/api/influencers?page=1&limit=100

### Search with no results
GET http://localhost:3001/api/beats?search=nonexistentterm

### Empty search (should return all with pagination)
GET http://localhost:3001/api/influencers?search=&page=1&limit=3

### ===========================================
### COMPLEX RELATIONSHIP QUERIES
### ===========================================

### Get all influencers with social platforms (paginated)
GET http://localhost:3001/api/influencers?page=1&limit=10

### Get all brands with their beats (paginated)
GET http://localhost:3001/api/brands?page=1&limit=10

### Get specific influencer with full relationships
GET http://localhost:3001/api/influencers/1

### Get specific brand with full relationships  
GET http://localhost:3001/api/brands/1

### ===========================================
### ERROR TESTING
### ===========================================
### Note: These endpoints also require authentication now

### Test validation errors - missing required fields
POST http://localhost:3001/api/influencers
Content-Type: application/json
Authorization: Bearer {{authToken}}

{
  "username": "testuser"
  // Missing required fields: email, nameEn, nameAr, profilePictureUrl
}

### Test validation errors - invalid email
POST http://localhost:3001/api/influencers
Content-Type: application/json

{
  "username": "testuser2",
  "email": "invalid-email",
  "nameEn": "Test User",
  "nameAr": "مستخدم تجريبي",
  "profilePictureUrl": "https://example.com/test.jpg"
}

### Test validation errors - invalid URL
POST http://localhost:3001/api/brands
Content-Type: application/json

{
  "nameEn": "Test Brand",
  "nameAr": "علامة تجارية تجريبية",
  "logoUrl": "invalid-url",
  "websiteUrl": "https://valid-url.com"
}

### Test validation errors - invalid social platform key
POST http://localhost:3001/api/influencers
Content-Type: application/json

{
  "username": "testuser3",
  "email": "test3@example.com",
  "nameEn": "Test User 3",
  "nameAr": "مستخدم تجريبي 3",
  "profilePictureUrl": "https://example.com/test3.jpg",
  "socialPlatforms": [
    {
      "key": "invalid-platform",
      "url": "https://example.com/profile",
      "numberOfFollowers": 1000
    }
  ]
}

### Test foreign key constraint - non-existent influencer
POST http://localhost:3001/api/beats
Content-Type: application/json

{
  "caption": "Test beat with invalid influencer",
  "mediaUrl": "https://example.com/media/test.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/test.jpg",
  "statusKey": "draft",
  "influencerId": 999,
  "brandId": 1
}

### Test foreign key constraint - non-existent brand
POST http://localhost:3001/api/beats
Content-Type: application/json

{
  "caption": "Test beat with invalid brand",
  "mediaUrl": "https://example.com/media/test.mp4",
  "thumbnailUrl": "https://example.com/thumbnails/test.jpg",
  "statusKey": "draft",
  "influencerId": 1,
  "brandId": 999
}

### ===========================================
### BULK DATA CREATION FOR TESTING
### ===========================================

### Create multiple influencers for testing
POST http://localhost:3001/api/influencers
Content-Type: application/json

{
  "username": "alextech",
  "email": "alex@techworld.com",
  "nameEn": "Alex Johnson",
  "nameAr": "أليكس جونسون",
  "profilePictureUrl": "https://example.com/profiles/alex.jpg",
  "socialPlatforms": [
    {
      "key": "youtube",
      "url": "https://youtube.com/alextech",
      "numberOfFollowers": 100000
    },
    {
      "key": "twitter",
      "url": "https://twitter.com/alextech",
      "numberOfFollowers": 25000
    }
  ]
}

### Create gaming influencer
POST http://localhost:3001/api/influencers
Content-Type: application/json

{
  "username": "gamerpro",
  "email": "gamer@proplay.com",
  "nameEn": "GameMaster Pro",
  "nameAr": "محترف الألعاب",
  "profilePictureUrl": "https://example.com/profiles/gamer.jpg",
  "socialPlatforms": [
    {
      "key": "tiktok",
      "url": "https://tiktok.com/@gamerpro",
      "numberOfFollowers": 200000
    },
    {
      "key": "youtube",
      "url": "https://youtube.com/gamemaster",
      "numberOfFollowers": 50000
    },
    {
      "key": "instagram",
      "url": "https://instagram.com/gamerpro",
      "numberOfFollowers": 75000
    }
  ]
}

### ===========================================
### COMPREHENSIVE SEARCH AND FILTER TESTING
### ===========================================

### BEATS SEARCH TESTS
### Search beats by caption
GET http://localhost:3001/api/beats?search=summer

### Search beats with pagination
GET http://localhost:3001/api/beats?search=campaign&page=1&limit=2

### Search beats case insensitive
GET http://localhost:3001/api/beats?search=FASHION

### INFLUENCERS SEARCH TESTS
### Search influencers by username
GET http://localhost:3001/api/influencers?search=john

### Search influencers by English name
GET http://localhost:3001/api/influencers?search=smith

### Search influencers by Arabic name
GET http://localhost:3001/api/influencers?search=سارة

### Search influencers by email domain
GET http://localhost:3001/api/influencers?search=example.com

### Search influencers with pagination
GET http://localhost:3001/api/influencers?search=pro&page=1&limit=2

### BRANDS SEARCH TESTS
### Search brands by English name
GET http://localhost:3001/api/brands?search=tech

### Search brands by Arabic name
GET http://localhost:3001/api/brands?search=حلول

### Search brands case insensitive
GET http://localhost:3001/api/brands?search=FASHION

### Search brands with pagination
GET http://localhost:3001/api/brands?search=corp&page=1&limit=1

### COMBINED SEARCH AND PAGINATION TESTS
### Test pagination metadata with different scenarios
GET http://localhost:3001/api/beats?page=2&limit=2

### Test total vs filtered counts
GET http://localhost:3001/api/influencers?search=nonexistent&page=1&limit=5

### Test hasNextPage and hasPreviousPage flags
GET http://localhost:3001/api/brands?page=1&limit=1

### ===========================================
### RESPONSE STRUCTURE EXAMPLES
### ===========================================
### The following requests demonstrate the standardized response structure
### with pagination metadata across all domains
### Note: All require authentication token

### Example: Beats findAll response structure
### Expected Response:
### {
###   "data": [
###     {
###       "id": 1,
###       "caption": "Sample beat caption",
###       "mediaUrl": "https://example.com/media.mp4",
###       "thumbnailUrl": "https://example.com/thumb.jpg",
###       "statusKey": "active",
###       "createdAt": "2024-01-01T00:00:00.000Z",
###       "updatedAt": "2024-01-01T00:00:00.000Z",
###       "influencer": { "id": 1, "username": "...", ... },
###       "brand": { "id": 1, "nameEn": "...", ... }
###     }
###   ],
###   "meta": {
###     "page": 1,
###     "limit": 10,
###     "totalItems": 50,
###     "totalFiltered": 25,
###     "totalPages": 3,
###     "hasNextPage": true,
###     "hasPreviousPage": false
###   }
### }
GET http://localhost:3001/api/beats?page=1&limit=2
Authorization: Bearer {{authToken}}

### Example: Influencers findAll response structure  
### Expected Response: Similar structure with influencer data and socialPlatforms
GET http://localhost:3001/api/influencers?page=1&limit=2
Authorization: Bearer {{authToken}}

### Example: Brands findAll response structure
### Expected Response: Similar structure with brand data and beats relation
GET http://localhost:3001/api/brands?page=1&limit=2
Authorization: Bearer {{authToken}}

### Example: findOne responses (no pagination, just structured data)
### Expected Response: Single entity with relations, no meta object
GET http://localhost:3001/api/beats/1
Authorization: Bearer {{authToken}}

GET http://localhost:3001/api/influencers/1
Authorization: Bearer {{authToken}}

GET http://localhost:3001/api/brands/1
Authorization: Bearer {{authToken}}

### ===========================================
### QUICK START WORKFLOW
### ===========================================
### 1. Generate JWT keys: npm run generate:jwt-keys
### 2. Add keys to .env.development file
### 3. Start application: npm run start:dev  
### 4. Create first SuperAdmin user (POST /users - no auth required)
### 5. Login with SuperAdmin credentials (POST /auth/login)
### 6. Copy access_token from response
### 7. Use token in Authorization header for all other requests
### 8. Create additional users/assign roles (SuperAdmin only)
### 9. Test business endpoints (beats, brands, influencers) with auth

### ===========================================
### ENVIRONMENT PORTS
### ===========================================
### Development:  http://localhost:3001/api
### Testing:      http://localhost:3002/api  
### Staging:      http://localhost:3003/api
### Production:   http://localhost:3000/api